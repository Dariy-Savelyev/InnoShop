image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
  - build
  - test
  - sonarqube-check
  - versioning
  - docker-build
  - docker-deploy

# Define variables
variables:
  OBJECTS_DIRECTORY: 'obj'
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  SOURCE_CODE_PATH: '*/*/'
  REGISTRY_URL: 'docker-registry.galai.co'
  PROJECT_NAME: "chat-bot"
  IMAGE_NAME: "chat-full"
  DOCKER_DESTINATION: "dockeruser@192.168.1.125"
  VERSION_FILE: "VERSION"
  RELEASE_TYPE: "patch"

# Global cache rule
cache:
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    - '$NUGET_PACKAGES_DIRECTORY'
  policy: pull-push

before_script:
  - 'dotnet nuget locals all --clear'
  - 'dotnet restore ChatBot.sln --packages $NUGET_PACKAGES_DIRECTORY'

build:
  stage: build
  script:
    - 'dotnet build ChatBot.sln -p:BuildInParallel=false -m:1 --no-restore'
  tags:
    - win
  except:
    - master
    - tags

tests:
  stage: test
  script:
    - 'dotnet test ChatBot.sln -p:BuildInParallel=false -m:1 --no-restore'
  tags:
    - win
  except:
  - master
  - tags

versioning:
  stage: versioning
  script:
    - |
      export CURRENT_VERSION=$(cat $VERSION_FILE)
      export NEW_VERSION=$(python3 bump_version.py $CURRENT_VERSION $RELEASE_TYPE)
      echo "Current Version: $CURRENT_VERSION"
      echo "New Version: $NEW_VERSION"
      echo $NEW_VERSION > $VERSION_FILE
      python3 update_package_version.py $NEW_VERSION
      git config --global user.email "galaym@gmail.com"
      git config --global user.name "Mihail Galay"
      git add -A
      git commit -m "Bump version to $NEW_VERSION"
      git tag $NEW_VERSION
      git remote set-url origin http://oauth2:$CI_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
      git push origin --tags
      git push origin HEAD:master
  rules:
  - if: $CI_COMMIT_MESSAGE =~ /.*Bump version to .*/
    when: never
  - if: $CI_COMMIT_BRANCH == "master"
  # only:
  #   - master
  # except:
  #   variables:
  #     - $CI_COMMIT_MESSAGE =~ /^Bump version to .*$/

  tags:
    - linux

sonarqube-check:
  image: mcr.microsoft.com/dotnet/sdk:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  # cache:
  #   key: "${CI_JOB_NAME}"
  #   paths:
  #     - .sonar/cache
  script:
    - 'dotnet tool install --global dotnet-sonarscanner'
    - 'dotnet sonarscanner begin /k:"chat-with-ai-bot" /d:sonar.login="${SONAR_TOKEN}" /d:"sonar.host.url=${SONAR_HOST_URL}"'
    - 'dotnet build ChatBot.sln -p:BuildInParallel=false -m:1 --no-restore'
    - 'dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"'
    - |
      $reportTaskContent = Get-Content "${CI_PROJECT_DIR}/.sonarqube/out/.sonar/report-task.txt"
      $ceTaskUrl = ($reportTaskContent | Where-Object { $_ -match "ceTaskUrl" }) -replace "ceTaskUrl=", ""
      $headers = @{"Authorization" = "Basic " + [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes("${SONAR_TOKEN}:"))}
      do {
        Start-Sleep -Seconds 5
        $ceTaskResponse = Invoke-RestMethod -Uri $ceTaskUrl -Method Get -Headers $headers
        $ceTaskStatus = $ceTaskResponse.task.status
      } while ($ceTaskStatus -eq "IN_PROGRESS" -or $ceTaskStatus -eq "PENDING")
      if ($ceTaskStatus -eq "SUCCESS") {
        $analysisId = $ceTaskResponse.task.analysisId
        $qgStatusResponse = Invoke-RestMethod -Uri "${SONAR_HOST_URL}/api/qualitygates/project_status?analysisId=$analysisId" -Method Get -Headers $headers
        $qgStatus = $qgStatusResponse.projectStatus.status
        Write-Host $qgStatus
        if ($qgStatus -eq "ERROR") {
          Write-Host "Quality Gate failed:"
          $qgStatusResponse.projectStatus.conditions | ConvertTo-Json
          exit 1
        } else {
          Write-Host "Quality Gate passed."
        }
      } else {
        Write-Host "CE Task did not complete successfully!"
        exit 1
      }
  allow_failure: false
  tags:
    - win
  except:
  - master
  - tags

docker-build:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  script:
    - export CURRENT_VERSION=$(cat $VERSION_FILE)
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${REGISTRY_URL} -u ${CI_REGISTRY_USER} --password-stdin
    - docker build -t ${REGISTRY_URL}/${PROJECT_NAME}/${IMAGE_NAME}:latest -t ${REGISTRY_URL}/${PROJECT_NAME}/${IMAGE_NAME}:${CURRENT_VERSION} -f ./ChatBot.Server/ChatBot.Web/Dockerfile .
    - docker push ${REGISTRY_URL}/${PROJECT_NAME}/${IMAGE_NAME}:latest
    - docker push ${REGISTRY_URL}/${PROJECT_NAME}/${IMAGE_NAME}:${CURRENT_VERSION}
  only:
    - tags
  tags:
    - linux

docker-deploy:
  stage: docker-deploy
  image: alpine:latest
  script:
    - export CURRENT_VERSION=$(cat $VERSION_FILE)
    - ssh ${DOCKER_DESTINATION} "docker login ${REGISTRY_URL} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}"
    - ssh ${DOCKER_DESTINATION} "docker pull ${REGISTRY_URL}/${PROJECT_NAME}/${IMAGE_NAME}:${CURRENT_VERSION}"
    - ssh ${DOCKER_DESTINATION} "docker stop ${PROJECT_NAME} || true"
    - ssh ${DOCKER_DESTINATION} "docker rm ${PROJECT_NAME} || true"
    - ssh ${DOCKER_DESTINATION} "docker run -d --name ${PROJECT_NAME} -p 18080:8080 -p 18081:8081 -e ASPNETCORE_ENVIRONMENT=Production -e ConnectionStrings_App='${CONNECTIONSTRINGS_APP}' -e ElasticSearch_UserName=service -e ElasticSearch_Password='${ELASTICSEARCH_PASSWORD}' -e APP_VERSION='${CURRENT_VERSION}' ${REGISTRY_URL}/${PROJECT_NAME}/${IMAGE_NAME}:${CURRENT_VERSION}" 
  only:
    - tags
  tags:
    - linux